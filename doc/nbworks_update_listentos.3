.TH NBWORKS_UPDATE_LISTENTOS 3  2013-05-01 "" "Nbworks Manual"
.SH NAME
nbworks_uptade_listentos \- change the listening profile of a server
.SH SYNOPSIS
.nf
.B #include <nbworks.h>
.sp
.BI "int"
.br
.BI "  nbworks_update_listentos(unsigned char " service ","
.br
.BI "                           nbworks_namestate_p " namehandle ","
.br
.BI "                           unsigned char " newtakes_field ","
.br
.BI "                           struct nbworks_nbnamelst * " newlistento ");"
.fi
.SH DESCRIPTION
The \fBnbworks_update_listentos\fP() function changes the listening
profile of a server or listener server.
.PP
The argument \fIservice\fP is used to tell
\fBnbworks_update_listentos\fP() if you wish it to operate on a
datagram server or a session listener server. It can be one 
of \fBNBWORKS_DTG_SRVC\fP or \fBNBWORKS_SES_SRVC\fP. Setting
\fBnbworks_update_listentos\fP() to operate on the wrong server is
safe, although it will have wrong results.
.PP
The argument \fInamehandle\fP is the name handle returned by a previous
successfull call to \fBnbworks_regname\fP().
.PP
The argument \fInewtakes_field\fP is a bitfield, or boolean, depending
on wether a datagram server is operated on or a session listener server
is operated on.
.br
If the datagram server is operated on, this field is a bitfield with
possible values being \fBNBWORKS_TAKES_ALL\fP,
\fBNBWORKS_TAKES_BRDCST\fP, \fBNBWORKS_TAKES_UNQCST\fP or \fB0\fP
which determine if the server will accept any datagram at all, any
broadcast datagram, any unicast datagram or only datagrams originated
from names, that are passed in the fourth argument.
.br
If the session listener is operated on, this field is a boolean. If
set to non-zero, the server will accept any session request. If set to
zero, the caller will be checked against the list supplied in the
fourth argument.
.PP
The argument \fInewlistento\fP is a linked list of \fBstruct
nbworks_nbnamelst\fP which lists names, all in the same scope as the
name whose handle is passed in the second argument that are listened
to.
.SH "RETURN VALUE"
This function returns a positive number if is succedes, zero if it
fails or a negative number if an error occurs.
.PP
In case of error, you should check \fInbworks_errno\fP for more
information.
.SH NOTES
While it is an error to call one of \fBnbworks_listen_dtg\fP() or
\fBnbworks_listen_ses\fP() with both their \fItakes_field\fP and
\fIlistento\fP arguments set to 0, it is \fBnot\fP an error to call
\fBnbworks_update_listentos\fP() with both \fInewtakes_field\fP and
\fInewlistentos\fP set to 0. If that is done, the server will be
switched into an all-drop mode. There are perky things that can be
done with this.
.PP
Please be aware that nbworks does not enforce the matching of sender
names contained in a datagram and the IP address from which the
datagram was received. Spoofing both is possible.
.PP
Please be aware that nbworks does not enforce the matching of caller
names contained in a call request and the IP address from which the
request originated. Spoofing both is possible.
.PP
.PP
.SH "ACCEPTING NEW DATAGRAMS AND CALLS"
DATAGRAM SERVER: An incoming datagram is first checked against the
rules specified in \fInewtakes_field\fP. If it matches, it is
accepted. If it does not match, its sending name is matched against an
internal copy of the list passed in \fInewlistento\fP. If it matches
those, the datagram is accepted. If it fails to match, it is
discarded.
.PP
SESSION LISTENER SERVER: When a call comes in, the value of
\fInewtakes_field\fP is first consulted. If it is non-zero, the call
is accepted and added to the queue of pending calls. If
\fInewtakes_field\fP is zero, then the caller is matched against an
internal copy of the list provided by \fInewlistento\fP. If it
matches, the new session is accepted and added to the queue. If it
does not match, the call is refused.
.SH INCOMPATIBILITES
Most (or all?) other implementations of NetBIOS-over-TCP out there
apparently assume that a single host can only have a name registered
in one scope and that an enterprising user will never register a same
name in multiple scopes. Or, at least, that all those names in
different scopes will be registered by the same application, used for
the same purpose and have the same effects.
.PP
Nbworks makes no such assumptions.
.PP
However, these lesser implementations of NetBIOS-over-TCP have made it
a standard practice to only include the NetBIOS name and not the scope
as well in the call request packet. To NetBIOS, all such call requests
look as if they are conducted in the "null scope". This creates grave
problems in interoperability.
.PP
The effect of these incompatibilities is that if a lesser
implementation of NetBIOS attempts to call a nbworks-registered and
operated name which exists in a scope other than the null scope,
nbworks will believe that the other NetBIOS implementation is trying
to call that name as if it were in the null scope. If a name HAS
been registered in null scope, the call will be rerouted to that,
wrong, name. Otherwise, the call request will be rejected.
.PP
\fBWORKAROUND:\fP
.br
1. Never register the same name in multiple scopes.
.br
2. Notwithstanding the previous step, whatever name you register,
register it both in your desired scope and in the null scope.
.br
3. Pray to God Almigthy no other application on your host tries to
register the same name as you did, in whatever scope, or that there
is another nbworks user in your networks using this same workaround.
.PP
It is the most sincere hope of nbworks' author that other implementors
will also be bathed in the light of reason and wisdom and change their
implementations to also send, receive, and parse the scope in call
requests.
.SH "SEE ALSO"
.BR nbworks (7),
.BR nbworks_regname (3),
.BR nbworks_delname (3),
.BR nbworks_listen_dtg (3),
.BR nbworks_listen_ses (3),
.BR nbworks_sendto (3),
.BR nbworks_recvfrom (3)
